scalar DateTime
scalar Entry

type Invoice {
  id: String
  date: DateTime
  dueDate: DateTime
  invoiceNumber: String
  status: String
  terms: String
  taxes: Float
  total: Float
  remarks: String
  customer: Customer!
  company: Company!
  createdAt: DateTime
  updatedAt: DateTime
  entry: [Entry!]
}

input CreateInvoiceInput {
  date: DateTime!
  dueDate: DateTime!
  status: String!
  terms: String!
  taxes: Float!
  total: Float!
  remarks: String
  customerId: String!
  companyId: String!
  entryList: [NewEntry!]
}

input NewEntry {
  date: DateTime
  description: String
  quantity: Float
  rate: Float
  total: Float
}

input UpdateInvoiceInput {
  id: String!
  date: DateTime
  dueDate: DateTime
  status: String
  terms: String
  taxes: Float
  total: Float
  entry: [Entry!]
  remarks: String
  customerId: String
  companyId: String
  updatedAt: DateTime
}

type Query {
  invoices: [Invoice]!
  invoice(id: String!): Invoice
  sumAllInvoices: Float!
  invoiceCount: Int!
}

type Mutation {
  createInvoice(createInvoiceInput: CreateInvoiceInput!): Invoice!
  updateInvoice(updateInvoiceInput: UpdateInvoiceInput!): Invoice!
  removeInvoice(id: String!): Invoice
}
